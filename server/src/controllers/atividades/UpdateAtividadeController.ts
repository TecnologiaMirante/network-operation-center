<<<<<<< HEAD
import { Request, Response } from "express";
import { PrismaAtividadesRepository } from "../../repositories/prisma/atividades/prisma-atividades-repository";
import { PrismaConteudosRepository } from "../../repositories/prisma/conteudos/prisma-conteudo-repository";
import { UpdateAtividadeService } from "../../services/atividades/UpdateAtividadeService";
import { FindAtividadeService } from "../../services/atividades/FindAtividadeService";

import { PrismaQuestoesRepository } from "../../repositories/prisma/questoes/prisma-questoes-repository";
import { CreateQuestaoService } from "../../services/questoes/CreateQuestaoService";
import { UpdateQuestaoService } from "../../services/questoes/UpdateQuestaoService";

import { PrismaOpcoesRepository } from "../../repositories/prisma/opcoes/prisma-opcoes-repository";
import { CreateManyOpcoesService } from "../../services/opcoes/CreateManyOpcoesService";
import { DeleteManyOpcoesByQuestaoService } from "../../services/opcoes/DeleteManyOpcoesByQuestaoService";

import { PrismaAtividadeHasQuestoesRepository } from "../../repositories/prisma/atividades/prisma-atividade-has-questoes-repository";
import { CreateAtividadeHasQuestoesService } from "../../services/atividades/atividade-has-questoes/CreateAtividadeHasQuestoesService";
import { FindAtividadeHasQuestoesByQuestaoService } from "../../services/atividades/atividade-has-questoes/FindAtividadeHasQuestoesByQuestaoService";
import { DeleteManyAtividadeHasQuestoesByAtividadeService } from "../../services/atividades/atividade-has-questoes/DeleteManyAtividadeHasQuestoesByAtividadeService";
import { DeleteAtividadeHasQuestoesService } from "../../services/atividades/atividade-has-questoes/DeleteAtividadeHasQuestoesService";

import { PrismaDisciplinasRepository } from "../../repositories/prisma/disciplinas/prisma-disciplinas-repository";
import { DeleteQuestaoService } from "../../services/questoes/DeleteQuestaoService";


//         Ol├А, meu amigo
// РађРађРаўРАђРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРАюРађРађРађ
// РађРађРађРаЉРАђРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРАћРаЂРађРађРађ
// РађРађРађРађРаѕРабРбёРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРБђРа┤РаіРађРађРађРађРађ
// РађРађРађРађРађРађРађРбИРађРађРађРбђРБђРБђРБђРБђРБђРАђРацРаёРањРаѕРађРађРађРађРађРађРађРађ
// РађРађРађРађРађРађРађРаўРБђРаёРаіРаЂРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ
// Рађ
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РА┐Ра┐РаЏРаЏРаЏРаІРаЅРаѕРаЅРаЅРаЅРаЅРаЏРа╗Рб┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РА┐РаІРаЂРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРаЅРаЏРб┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РАЈРБђРађРађРађРађРађРађРађРБђРБцРБцРБцРБёРАђРађРађРађРађРађРађРађРаЎРб┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РбЈРБ┤РБ┐РБиРађРађРађРађРађРбЙРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РАєРађРађРађРађРађРађРађРаѕРБ┐РБ┐
// РБ┐РБ┐РБЪРБЙРБ┐РАЪРаЂРађРађРађРађРађРбђРБЙРБ┐РБ┐РБ┐РБ┐РБ┐РБиРббРађРађРађРађРађРађРађРбИРБ┐
// РБ┐РБ┐РБ┐РБ┐РБЪРађРА┤РаёРађРађРађРађРађРађРаЎРа╗РБ┐РБ┐РБ┐РБ┐РБиРБёРађРађРађРађРађРађРађРБ┐
// РБ┐РБ┐РБ┐РаЪРа╗РађРађРађРађРађРађРађРађРађРађРаХРб┤РБ┐РБ┐РБ┐РБ┐РБ┐РБДРађРађРађРађРађРађРБ┐
// РБ┐РБЂРАђРађРађРб░РбаРБдРађРађРађРађРађРађРађРађРбђРБ╝РБ┐РБ┐РБ┐РБ┐РБ┐РАёРађРБ┤РБХРБ┐РАёРБ┐
// РБ┐РАІРађРађРађРајРбИРБ┐РАєРађРађРађРађРађРађРБ┤РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РаЌРбўРБ┐РБЪРаЏРа┐РБ╝
// РБ┐РБ┐РаІРбђРАїРб░РБ┐РА┐Рб┐РАђРађРађРађРађРађРаЎРа┐РБ┐РБ┐РБ┐РБ┐РБ┐РАЄРађРбИРБ┐РБ┐РБДРбђРБ╝
// РБ┐РБ┐РБиРб╗РаёРаўРаЏРаІРаЏРаЃРађРађРађРађРађРб┐РБДРаѕРаЅРаЎРаЏРаІРађРађРађРБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБДРађРаѕРбИРађРађРађРађРађРађРађРађРађРађРаЪРађРађРађРађРбђРбЃРађРађРбИРБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РА┐РађРа┤РбЌРБаРБцРБ┤РАХРаХРаќРађРађРађРађРађРађРађРађРађРађРађРБђРАИРађРБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РАђРбаРБЙРБ┐РаЈРађРааРађРађРађРађРађРађРађРађРађРађРађРађРађРаЏРаЅРађРБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБДРаѕРб╣РАЄРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРБ░РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РАёРаѕРаЃРађРађРађРађРађРађРађРађРађРађРађРађРађРађРбђРБаРБ┤РБЙРБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБДРАђРађРађРађРађРађРађРађРађРађРађРађРађРбђРБаРБЙРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБиРађРађРађРађРађРађРађРађРађРађРађРбђРБ┤РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБдРБёРБђРБђРБђРБђРађРађРађРађРаўРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБиРАёРађРађРађРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБДРађРађРађРаЎРБ┐РБ┐РАЪРб╗РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РаЄРађРаЂРађРађРа╣РБ┐РаЃРађРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РА┐РаЏРБ┐РБ┐РађРађРађРађРађРађРађРађРбљРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐Ра┐РаЏРаЅРаЅРаЂРађРб╗РБ┐РАЄРађРађРађРађРађРађРбђРаѕРБ┐РБ┐РА┐РаЅРаЏРаЏРаЏРаЅРаЅ
// РБ┐РА┐РаІРаЂРађРађРбђРБђРБаРА┤РБИРБ┐РБЄРАёРађРађРађРађРбђРА┐РаёРаЎРаЏРађРБђРБаРБцРБцРаёРађ

// # Funcionamento b├Аsico da Atualiza├Д├Бo da atividade:
// 
// ├Ѕ poss├Гvel atualizar a atividade atrav├Еs das seguintes a├Д├хes:
// 1- Atualizar as informa├Д├хes b├Аsicas da atividade (title, etc ...)
// 2- Adicionar quest├хes
// 3- Remover quest├хes
// 4- Editar as quest├хes

// PONTOS IMPORTANTES
// Existem 3 tabelas principais envolvidas neste Service:
//    - Atividade
//    - Questao
//    - Opcao

// Existem tabelas secund├Аrias
//    - Atividade_has_questao | respons├Аvel por relacionar a atividade com as suas v├Аrias quest├хes

// Descri├Д├Бo das a├Д├хes
//    1- Atualizar informa├Д├хes b├Аsicas
//        - Pega as informa├Д├хes vindas do controller e atualiza a atividade.
//
//    2- Adicionar quest├Бo
//        - Uma nova quest├Бo ├Е criada
//        - Seu relacionamento ├Е criado com a atividade atual
//
//    3- Remover quest├Бo
//        - Seu relacionamento com a atividade atual ├Е exclu├Гdo
//
//    4- Editar a quest├Бo
//        - Atualiza as informa├Д├хes da quest├Бo

// ... A descri├Д├Бo t├Еcnica de cada a├Д├Бo est├А descrita em sua respectiva se├Д├Бo ...

class UpdateAtividadeController {
  async handle(req:Request, res:Response) {

    // Dados do par├бmetro da requisi├Д├Бo
    const { id } = req.params;

    // 1 - ATUALIZANDO ATIVIDADE ================================================================================================================

    // Dados do corpo da requisi├Д├Бo
    const { title, id_serie, id_disciplina } = req.body;

    // Reposit├│rio do modelo do prisma
    const prismaAtividadesRepository = new PrismaAtividadesRepository();
    const prismaConteudosRepository = new PrismaConteudosRepository();
    
    const updateAtividadeService = new UpdateAtividadeService(prismaAtividadesRepository, prismaConteudosRepository);

    // const thumb = "https://storage.googleapis.com/mrt-mais-educacao-dev-midias/Atividade.png";
    
    // Executando o service para atualizar a atividade
    const atividade = await updateAtividadeService.execute({
      id,
      title,
      // thumb,
      id_serie,
      id_disciplina
    })
    
    // Caso aconte├Дa algum erro, interrompe o processo retorna a mensagem de erro
    if(atividade instanceof Error) {
        return res.status(400).send(atividade.message);
    }

    // BUSCANDO ATIVIDADE REC├ЅM ATUALIZADA COM OS DADOS B├ЂSICOS (SEM QUEST├ЋES) ============================================================================================

    // Service de buscar a atividade com as quest├хes
    const findAtividadeService = new FindAtividadeService(prismaAtividadesRepository);

    // Executando o service
    const atividade_atualizada = await findAtividadeService.execute({id})
    
    // Salvando as quest├хes em uma vari├Аvel pr├│pria
    const questoes_antigas = Object(atividade_atualizada).questoes;

    // 2 - VERIFICANDO AS QUEST├ЋES VINDAS DA REQUISI├Є├ЃO ================================================================================================
    
    // Dados do corpo da requisi├Д├Бo
    // const { questoes } = req.body;
    const questoes_novas = req.body.questoes;

    // Na hora de atualizar as quest├хes da atividade, existem 3 casos
    // 1 - Editar a quest├Бo
    // 2 - Colocar quest├хes que n├Бo existem
    // 3 - Remover quest├хes que j├А existem
    
    // 1 - Editar a quest├Бo
    //    - Ele edita a quest├Бo ­ЪЉЇ

    // 2 - Colocar quest├Бo que n├Бo existe
    //    - Cria a quest├Бo
    //    - Relaciona a mesma com a atividade

    // 3 - Remove quest├Бo que j├А existe
    //    - Compara as quest├хes vindas da requisi├Д├Бo com as j├А existentes
    //    - A quest├Бo que existir no array das existentes, por├Еm estiver faltando no array das vindas da requisi├Д├Бo, seu relacionamento ├Е exclu├Гdo

    // A vari├Аvel "questoes" ├Е opcional, portanto, o service seguinte s├│ ├Е chamado caso ela n├Бo seja nula
    if (questoes_novas && questoes_novas.length != 0) {
      
      // Array com as quest├хes v├Аlidas
      let array_questoes_existentes = [];

      // Reposit├│rio das op├Д├хes
      const prismaOpcoesRepository = new PrismaOpcoesRepository();    
      // Reposit├│rio das quest├хes
      const prismaQuestoesRepository = new PrismaQuestoesRepository();    

      // Percorrendo as quest├хes novas vindas da requisi├Д├Бo
      for (let question of questoes_novas) {

        // Verificando se a quest├Бo tem id
        if (question.id) {

          // Se tiver, ├Е porque ela j├А existe, ent├Бo somente atualiza ela

          // Reposit├│rio das disciplinas
          const prismaDisciplinasRepository = new PrismaDisciplinasRepository();

          // Service para excluir as antigas op├Д├хes
          const deleteManyOpcoesByQuestaoService = new DeleteManyOpcoesByQuestaoService(prismaOpcoesRepository);
          
          // Apagando as antigas op├Д├хes
          const opcoes_apagadas = await deleteManyOpcoesByQuestaoService.execute({ id_questao: question.id })

          // Service para atualizar a quest├Бo
          const updateQuestaoService = new UpdateQuestaoService(prismaQuestoesRepository, prismaDisciplinasRepository);

          try {
            // Atualizando a quest├Бo
            const questaoAtualizada = await updateQuestaoService.execute({
              id: question.id,
              title: question.title_question,
              question_type: question.question_type,
              id_disciplina: question.id_disciplina,
              grade: question.grade,
              difficulty: question.difficulty
            });

            if (questaoAtualizada instanceof Error) {
              return new Error("Erro ao atualizar quest├Бo!");
            }

            // Adicionando no array de quest├хes existentes
            array_questoes_existentes.push(question.id);

            // ATUALIZANDO AS OP├Є├ЋES DA QUEST├ЃO
            // Inst├бncia do service
            const createManyOpcoesService = new CreateManyOpcoesService(prismaOpcoesRepository, prismaQuestoesRepository);
      
            // Adicionando o id da quest├Бo nas op├Д├хes para o tipo de dado que o service aceita
            for (let item of question.opcao) {
              item.id_questao = question.id;
            }

            // Criando as op├Д├хes
            try {
              const opcoes = await createManyOpcoesService.execute({
                  array_opcao: question.opcao
              });  

              if (opcoes instanceof Error) {
                return new Error("Erro ao atualizar as op├Д├хes")
              }
              
            } catch (err) {
              return err;
            }

          } catch (err) {
            return err;
          }

        } 

        // Se n├Бo tiver, ele cria a quest├Бo com o relacionamento entre a quest├Бo e a atividade
        else {
          try {
            // Inst├бncia do service
            const createQuestaoService = new CreateQuestaoService(prismaQuestoesRepository);
        
            try {
              // Executando o service
              const questao = await createQuestaoService.execute({
                  title: question.title,
                  question_type: question.question_type,
                  id_disciplina,
                  grade: 10,
                  difficulty: "normal"
              })
  
              // 3 - CRIANDO AS OP├Є├ЋES =====================================================================================================

              const prismaQuestoesRepository = new PrismaQuestoesRepository();    

              // Inst├бncia do service
              const createManyOpcoesService = new CreateManyOpcoesService(prismaOpcoesRepository, prismaQuestoesRepository);
  
              for (let item1 of question.opcao) {
                  item1.id_questao = Object(questao).id;
              }
  
              try {
                  const opcoes = await createManyOpcoesService.execute({
                      array_opcao: question.opcao
                  });  
                  
              } catch (err) {
                return err;
              }
              
              // 4 - RELACIONANDO A QUEST├ЃO COM A ATIVIDADE
  
              // Reposit├│rio do atividade_has_quest├хes
              const prismaAtividadeHasQuestoesRepository = new PrismaAtividadeHasQuestoesRepository();    
  
              // Inst├бncia do service
              const createAtividadeHasQuestoes = new CreateAtividadeHasQuestoesService(prismaAtividadesRepository, prismaQuestoesRepository, prismaAtividadeHasQuestoesRepository);
              
              try {
                let atividadehasQuestoes = await createAtividadeHasQuestoes.execute({
                  id_atividade: Object(atividade).id,
                  id_questao: Object(questao).id
                })

                if (atividadehasQuestoes instanceof Error) {
                  return new Error("Erro ao relacionar as quest├хes da atividade!");
                }

              } catch (err) {
                return err;
              }
            } catch (err) {
                return err;
            }
    
          } catch (err) {
            return new Error("Erro ao deletar quest├Бo");
          }          
        }
      }

      // REMOVENDO QUEST├ЋES =================================================================================================================================

      // Comparar as quest├хes vindas da requisi├Д├Бo (questoes_novas) com as existentes (questoes_antigas)
      // A que existir em "questoes_antigas", mas n├Бo existir em "questoes_novas", ser├А exclu├Гda

      const prismaAtividadeHasQuestoesRepository = new PrismaAtividadeHasQuestoesRepository();

      const findAtividadeHasQuestoesByQuestaoService = new FindAtividadeHasQuestoesByQuestaoService(prismaAtividadeHasQuestoesRepository);

      const deleteAtividadeHasQuestoesService = new DeleteAtividadeHasQuestoesService(prismaAtividadeHasQuestoesRepository);

      for (let questao_antiga of questoes_antigas) {

        // Verificando se a quest├Бo antiga est├А no array das novas
        let index = questoes_novas.findIndex((val: { id: any; }) => val.id == questao_antiga.id)

        // Se o index for menor que 0, ├Е porque ele n├Бo est├А
        if (index < 0) {
          // Buscando o relacionamento entre a atividade e a quest├Бo
          const relacionamento = await findAtividadeHasQuestoesByQuestaoService.execute({id_atividade: id, id_questao: questao_antiga.id})

          if (relacionamento instanceof Error) {
            return new Error("Erro ao buscar relacionamento entre atividade e a quest├Бo que ser├А removida do relacionamento!");
          }

          const deletado = await deleteAtividadeHasQuestoesService.execute({id: Object(relacionamento).id })

          if (deletado instanceof Error) {
            return new Error("Erro ao deletar relacionamento entre a atividade e a quest├Бo antiga");
          }

        }

      }
    }

    const prismaAtividadeHasQuestoesRepository = new PrismaAtividadeHasQuestoesRepository();

    if (questoes_novas.length == 0) {
      const deleteManyAtividadeHasQuestoesByAtividadeService = new DeleteManyAtividadeHasQuestoesByAtividadeService(prismaAtividadeHasQuestoesRepository, prismaAtividadesRepository);
      await deleteManyAtividadeHasQuestoesByAtividadeService.execute({ id_atividade: id })
    }
    
    // Retornando mensagem de sucesso para o usu├Аrio
    return res.status(201).send(
      {
        message:"Criado com sucesso!",
      }
    );
  }
}

=======
import { Request, Response } from "express";
import { PrismaAtividadesRepository } from "../../repositories/prisma/atividades/prisma-atividades-repository";
import { PrismaConteudosRepository } from "../../repositories/prisma/conteudos/prisma-conteudo-repository";
import { UpdateAtividadeService } from "../../services/atividades/UpdateAtividadeService";
import { FindAtividadeService } from "../../services/atividades/FindAtividadeService";

import { PrismaQuestoesRepository } from "../../repositories/prisma/questoes/prisma-questoes-repository";
import { CreateQuestaoService } from "../../services/questoes/CreateQuestaoService";
import { UpdateQuestaoService } from "../../services/questoes/UpdateQuestaoService";

import { PrismaOpcoesRepository } from "../../repositories/prisma/opcoes/prisma-opcoes-repository";
import { CreateManyOpcoesService } from "../../services/opcoes/CreateManyOpcoesService";
import { DeleteManyOpcoesByQuestaoService } from "../../services/opcoes/DeleteManyOpcoesByQuestaoService";

import { PrismaAtividadeHasQuestoesRepository } from "../../repositories/prisma/atividades/prisma-atividade-has-questoes-repository";
import { CreateAtividadeHasQuestoesService } from "../../services/atividades/atividade-has-questoes/CreateAtividadeHasQuestoesService";
import { FindAtividadeHasQuestoesByQuestaoService } from "../../services/atividades/atividade-has-questoes/FindAtividadeHasQuestoesByQuestaoService";
import { DeleteManyAtividadeHasQuestoesByAtividadeService } from "../../services/atividades/atividade-has-questoes/DeleteManyAtividadeHasQuestoesByAtividadeService";
import { DeleteAtividadeHasQuestoesService } from "../../services/atividades/atividade-has-questoes/DeleteAtividadeHasQuestoesService";

import { PrismaDisciplinasRepository } from "../../repositories/prisma/disciplinas/prisma-disciplinas-repository";
import { DeleteQuestaoService } from "../../services/questoes/DeleteQuestaoService";


//         Ol├А, meu amigo
// РађРађРаўРАђРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРАюРађРађРађ
// РађРађРађРаЉРАђРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРАћРаЂРађРађРађ
// РађРађРађРађРаѕРабРбёРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРБђРа┤РаіРађРађРађРађРађ
// РађРађРађРађРађРађРађРбИРађРађРађРбђРБђРБђРБђРБђРБђРАђРацРаёРањРаѕРађРађРађРађРађРађРађРађ
// РађРађРађРађРађРађРађРаўРБђРаёРаіРаЂРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ
// Рађ
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РА┐Ра┐РаЏРаЏРаЏРаІРаЅРаѕРаЅРаЅРаЅРаЅРаЏРа╗Рб┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РА┐РаІРаЂРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРаЅРаЏРб┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РАЈРБђРађРађРађРађРађРађРађРБђРБцРБцРБцРБёРАђРађРађРађРађРађРађРађРаЎРб┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РбЈРБ┤РБ┐РБиРађРађРађРађРађРбЙРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РАєРађРађРађРађРађРађРађРаѕРБ┐РБ┐
// РБ┐РБ┐РБЪРБЙРБ┐РАЪРаЂРађРађРађРађРађРбђРБЙРБ┐РБ┐РБ┐РБ┐РБ┐РБиРббРађРађРађРађРађРађРађРбИРБ┐
// РБ┐РБ┐РБ┐РБ┐РБЪРађРА┤РаёРађРађРађРађРађРађРаЎРа╗РБ┐РБ┐РБ┐РБ┐РБиРБёРађРађРађРађРађРађРађРБ┐
// РБ┐РБ┐РБ┐РаЪРа╗РађРађРађРађРађРађРађРађРађРађРаХРб┤РБ┐РБ┐РБ┐РБ┐РБ┐РБДРађРађРађРађРађРађРБ┐
// РБ┐РБЂРАђРађРађРб░РбаРБдРађРађРађРађРађРађРађРађРбђРБ╝РБ┐РБ┐РБ┐РБ┐РБ┐РАёРађРБ┤РБХРБ┐РАёРБ┐
// РБ┐РАІРађРађРађРајРбИРБ┐РАєРађРађРађРађРађРађРБ┤РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РаЌРбўРБ┐РБЪРаЏРа┐РБ╝
// РБ┐РБ┐РаІРбђРАїРб░РБ┐РА┐Рб┐РАђРађРађРађРађРађРаЎРа┐РБ┐РБ┐РБ┐РБ┐РБ┐РАЄРађРбИРБ┐РБ┐РБДРбђРБ╝
// РБ┐РБ┐РБиРб╗РаёРаўРаЏРаІРаЏРаЃРађРађРађРађРађРб┐РБДРаѕРаЅРаЎРаЏРаІРађРађРађРБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБДРађРаѕРбИРађРађРађРађРађРађРађРађРађРађРаЪРађРађРађРађРбђРбЃРађРађРбИРБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РА┐РађРа┤РбЌРБаРБцРБ┤РАХРаХРаќРађРађРађРађРађРађРађРађРађРађРађРБђРАИРађРБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РАђРбаРБЙРБ┐РаЈРађРааРађРађРађРађРађРађРађРађРађРађРађРађРађРаЏРаЅРађРБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБДРаѕРб╣РАЄРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРБ░РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РАёРаѕРаЃРађРађРађРађРађРађРађРађРађРађРађРађРађРађРбђРБаРБ┤РБЙРБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБДРАђРађРађРађРађРађРађРађРађРађРађРађРађРбђРБаРБЙРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБиРађРађРађРађРађРађРађРађРађРађРађРбђРБ┤РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБдРБёРБђРБђРБђРБђРађРађРађРађРаўРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБиРАёРађРађРађРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБДРађРађРађРаЎРБ┐РБ┐РАЪРб╗РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РаЄРађРаЂРађРађРа╣РБ┐РаЃРађРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РА┐РаЏРБ┐РБ┐РађРађРађРађРађРађРађРађРбљРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐
// РБ┐РБ┐РБ┐РБ┐Ра┐РаЏРаЅРаЅРаЂРађРб╗РБ┐РАЄРађРађРађРађРађРађРбђРаѕРБ┐РБ┐РА┐РаЅРаЏРаЏРаЏРаЅРаЅ
// РБ┐РА┐РаІРаЂРађРађРбђРБђРБаРА┤РБИРБ┐РБЄРАёРађРађРађРађРбђРА┐РаёРаЎРаЏРађРБђРБаРБцРБцРаёРађ

// # Funcionamento b├Аsico da Atualiza├Д├Бo da atividade:
// 
// ├Ѕ poss├Гvel atualizar a atividade atrav├Еs das seguintes a├Д├хes:
// 1- Atualizar as informa├Д├хes b├Аsicas da atividade (title, etc ...)
// 2- Adicionar quest├хes
// 3- Remover quest├хes
// 4- Editar as quest├хes

// PONTOS IMPORTANTES
// Existem 3 tabelas principais envolvidas neste Service:
//    - Atividade
//    - Questao
//    - Opcao

// Existem tabelas secund├Аrias
//    - Atividade_has_questao | respons├Аvel por relacionar a atividade com as suas v├Аrias quest├хes

// Descri├Д├Бo das a├Д├хes
//    1- Atualizar informa├Д├хes b├Аsicas
//        - Pega as informa├Д├хes vindas do controller e atualiza a atividade.
//
//    2- Adicionar quest├Бo
//        - Uma nova quest├Бo ├Е criada
//        - Seu relacionamento ├Е criado com a atividade atual
//
//    3- Remover quest├Бo
//        - Seu relacionamento com a atividade atual ├Е exclu├Гdo
//
//    4- Editar a quest├Бo
//        - Atualiza as informa├Д├хes da quest├Бo

// ... A descri├Д├Бo t├Еcnica de cada a├Д├Бo est├А descrita em sua respectiva se├Д├Бo ...

class UpdateAtividadeController {
  async handle(req:Request, res:Response) {

    // Dados do par├бmetro da requisi├Д├Бo
    const { id } = req.params;

    // 1 - ATUALIZANDO ATIVIDADE ================================================================================================================

    // Dados do corpo da requisi├Д├Бo
    const { title, id_serie, id_disciplina } = req.body;

    // Reposit├│rio do modelo do prisma
    const prismaAtividadesRepository = new PrismaAtividadesRepository();
    const prismaConteudosRepository = new PrismaConteudosRepository();
    
    const updateAtividadeService = new UpdateAtividadeService(prismaAtividadesRepository, prismaConteudosRepository);

    // const thumb = "https://storage.googleapis.com/mrt-mais-educacao-dev-midias/Atividade.png";
    
    // Executando o service para atualizar a atividade
    const atividade = await updateAtividadeService.execute({
      id,
      title,
      // thumb,
      id_serie,
      id_disciplina
    })
    
    // Caso aconte├Дa algum erro, interrompe o processo retorna a mensagem de erro
    if(atividade instanceof Error) {
        return res.status(400).send(atividade.message);
    }

    // BUSCANDO ATIVIDADE REC├ЅM ATUALIZADA COM OS DADOS B├ЂSICOS (SEM QUEST├ЋES) ============================================================================================

    // Service de buscar a atividade com as quest├хes
    const findAtividadeService = new FindAtividadeService(prismaAtividadesRepository);

    // Executando o service
    const atividade_atualizada = await findAtividadeService.execute({id})
        
    // Salvando as quest├хes em uma vari├Аvel pr├│pria
    const questoes_antigas = Object(atividade_atualizada).questoes;
    
    // 2 - VERIFICANDO AS QUEST├ЋES VINDAS DA REQUISI├Є├ЃO ================================================================================================
    
    // Dados do corpo da requisi├Д├Бo
    // const { questoes } = req.body;
    const questoes_novas = req.body.questoes;
    
    // Na hora de atualizar as quest├хes da atividade, existem 3 casos
    // 1 - Editar a quest├Бo
    // 2 - Colocar quest├хes que n├Бo existem
    // 3 - Remover quest├хes que j├А existem
    
    // 1 - Editar a quest├Бo
    //    - Ele edita a quest├Бo ­ЪЉЇ

    // 2 - Colocar quest├Бo que n├Бo existe
    //    - Cria a quest├Бo
    //    - Relaciona a mesma com a atividade

    // 3 - Remove quest├Бo que j├А existe
    //    - Compara as quest├хes vindas da requisi├Д├Бo com as j├А existentes
    //    - A quest├Бo que existir no array das existentes, por├Еm estiver faltando no array das vindas da requisi├Д├Бo, seu relacionamento ├Е exclu├Гdo

    // A vari├Аvel "questoes" ├Е opcional, portanto, o service seguinte s├│ ├Е chamado caso ela n├Бo seja nula
    if (questoes_novas && questoes_novas.length != 0) {
      
      // Array com as quest├хes v├Аlidas
      let array_questoes_existentes = [];

      // Reposit├│rio das op├Д├хes
      const prismaOpcoesRepository = new PrismaOpcoesRepository();    
      // Reposit├│rio das quest├хes
      const prismaQuestoesRepository = new PrismaQuestoesRepository();    

      // Percorrendo as quest├хes novas vindas da requisi├Д├Бo
      for (let question of questoes_novas) {        

        // Verificando se a quest├Бo tem id
        if (question.id) {

          // Se tiver, ├Е porque ela j├А existe, ent├Бo somente atualiza ela

          // Reposit├│rio das disciplinas
          const prismaDisciplinasRepository = new PrismaDisciplinasRepository();

          // Service para excluir as antigas op├Д├хes
          const deleteManyOpcoesByQuestaoService = new DeleteManyOpcoesByQuestaoService(prismaOpcoesRepository);
          
          // Apagando as antigas op├Д├хes
          const opcoes_apagadas = await deleteManyOpcoesByQuestaoService.execute({ id_questao: question.id })

          // Service para atualizar a quest├Бo
          const updateQuestaoService = new UpdateQuestaoService(prismaQuestoesRepository, prismaDisciplinasRepository);

          try {
            // Atualizando a quest├Бo
            const questaoAtualizada = await updateQuestaoService.execute({
              id: question.id,
              title: question.title_question,
              question_type: question.question_type,
              id_disciplina: question.id_disciplina,
              grade: question.grade,
              difficulty: question.difficulty
            });

            if (questaoAtualizada instanceof Error) {
              return new Error("Erro ao atualizar quest├Бo!");
            }

            // Adicionando no array de quest├хes existentes
            array_questoes_existentes.push(question.id);

            // ATUALIZANDO AS OP├Є├ЋES DA QUEST├ЃO
            // Inst├бncia do service
            const createManyOpcoesService = new CreateManyOpcoesService(prismaOpcoesRepository, prismaQuestoesRepository);
      
            // Adicionando o id da quest├Бo nas op├Д├хes para o tipo de dado que o service aceita
            for (let item of question.opcao) {
              item.id_questao = question.id;
            }

            // Criando as op├Д├хes
            try {
              const opcoes = await createManyOpcoesService.execute({
                  array_opcao: question.opcao
              });  

              if (opcoes instanceof Error) {
                return new Error("Erro ao atualizar as op├Д├хes")
              }
              
            } catch (err) {
              return err;
            }

          } catch (err) {
            return err;
          }

        } 
        
        // Se n├Бo tiver, ele cria a quest├Бo com o relacionamento entre a quest├Бo e a atividade
        else {    
          try {
            // Inst├бncia do service
            const createQuestaoService = new CreateQuestaoService(prismaQuestoesRepository);                 

            try {
              // Executando o service
              const questao = await createQuestaoService.execute({
                  title: question.title,
                  question_type: question.question_type,
                  id_disciplina,
                  grade: 10,
                  difficulty: "normal"
              })
  
              // 3 - CRIANDO AS OP├Є├ЋES =====================================================================================================

              const prismaQuestoesRepository = new PrismaQuestoesRepository();    

              // Inst├бncia do service
              const createManyOpcoesService = new CreateManyOpcoesService(prismaOpcoesRepository, prismaQuestoesRepository);
  
              for (let item1 of question.opcao) {
                  item1.id_questao = Object(questao).id;
              }
  
              try {
                  const opcoes = await createManyOpcoesService.execute({
                      array_opcao: question.opcao
                  });  
                  
              } catch (err) {
                return err;
              }
              
              // 4 - RELACIONANDO A QUEST├ЃO COM A ATIVIDADE
  
              // Reposit├│rio do atividade_has_quest├хes
              const prismaAtividadeHasQuestoesRepository = new PrismaAtividadeHasQuestoesRepository();    
  
              // Inst├бncia do service
              const createAtividadeHasQuestoes = new CreateAtividadeHasQuestoesService(prismaAtividadesRepository, prismaQuestoesRepository, prismaAtividadeHasQuestoesRepository);
              
              try {
                let atividadehasQuestoes = await createAtividadeHasQuestoes.execute({
                  id_atividade: Object(atividade).id,
                  id_questao: Object(questao).id
                })

                if (atividadehasQuestoes instanceof Error) {
                  return new Error("Erro ao relacionar as quest├хes da atividade!");
                }

              } catch (err) {
                return err;
              }
            } catch (err) {
                return err;
            }
    
          } catch (err) {
            return new Error("Erro ao deletar quest├Бo");
          }          
        }
      }

      // REMOVENDO QUEST├ЋES =================================================================================================================================

      // Comparar as quest├хes vindas da requisi├Д├Бo (questoes_novas) com as existentes (questoes_antigas)
      // A que existir em "questoes_antigas", mas n├Бo existir em "questoes_novas", ser├А exclu├Гda

      const prismaAtividadeHasQuestoesRepository = new PrismaAtividadeHasQuestoesRepository();

      const findAtividadeHasQuestoesByQuestaoService = new FindAtividadeHasQuestoesByQuestaoService(prismaAtividadeHasQuestoesRepository);

      const deleteAtividadeHasQuestoesService = new DeleteAtividadeHasQuestoesService(prismaAtividadeHasQuestoesRepository);

      for (let questao_antiga of questoes_antigas) {

        console.log(questoes_antigas)

        // Verificando se a quest├Бo antiga est├А no array das novas
        let index = questoes_novas.findIndex((val: { id: any; }) => val.id == questao_antiga.id)

        // Se o index for menor que 0, ├Е porque ele n├Бo est├А
        if (index < 0) {
          // Buscando o relacionamento entre a atividade e a quest├Бo
          const relacionamento = await findAtividadeHasQuestoesByQuestaoService.execute({id_atividade: id, id_questao: questao_antiga.id})

          if (relacionamento instanceof Error) {
            return new Error("Erro ao buscar relacionamento entre atividade e a quest├Бo que ser├А removida do relacionamento!");
          }

          const deletado = await deleteAtividadeHasQuestoesService.execute({id: Object(relacionamento).id })

          if (deletado instanceof Error) {
            return new Error("Erro ao deletar relacionamento entre a atividade e a quest├Бo antiga");
          }

        }

      }
    }

    const prismaAtividadeHasQuestoesRepository = new PrismaAtividadeHasQuestoesRepository();

    if (questoes_novas.length == 0) {
      const deleteManyAtividadeHasQuestoesByAtividadeService = new DeleteManyAtividadeHasQuestoesByAtividadeService(prismaAtividadeHasQuestoesRepository, prismaAtividadesRepository);
      await deleteManyAtividadeHasQuestoesByAtividadeService.execute({ id_atividade: id })
    }
    
    // Retornando mensagem de sucesso para o usu├Аrio
    return res.status(201).send(
      {
        message:"Criado com sucesso!",
      }
    );
  }
}

>>>>>>> a0b295eeda05e1d8006bf3f9bfc720e423364484
export { UpdateAtividadeController };